data=penguins
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
dat <- penguins # rename dataset
str(dat) # structure of dataset
table(dat$species, dat$sex)
mod <- aov(body_mass_g ~ sex * species,
data = dat
)
plot(mod, which = 2)
library(car)
install.packages("car")
library(car)
qqPlot(mod$residuals,
id = FALSE # remove point identification
)
hist(mod$residuals)
shapiro.test(mod$residuals)
plot(mod, which = 3)
leveneTest(mod)
ggplot(dat) +
aes(x = sex, y = body_mass_g) +
geom_boxplot()
library(ggplot2)
ggplot(dat) +
aes(x = sex, y = body_mass_g) +
geom_boxplot()
# boxplots by species
ggplot(dat) +
aes(x = species, y = body_mass_g) +
geom_boxplot()
# mean by group
aggregate(body_mass_g ~ species + sex,
data = dat,
FUN = mean
)
# mean and sd by group
library(dplyr)
group_by(dat, sex, species) %>%
summarise(
mean = round(mean(body_mass_g, na.rm = TRUE)),
sd = round(sd(body_mass_g, na.rm = TRUE))
)
# boxplot by group
library(ggplot2)
ggplot(dat) +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
# boxplot by group
library(ggplot2)
ggplot(dat) +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
dat %>%
filter(!is.na(sex)) %>%
ggplot() +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
dat %>%
filter(!is.na(sex)) %>%
ggplot() +
aes(x = sex, y = body_mass_g, fill = species) +
geom_boxplot()
# H0=All Means are same
#H1=The means are not equal
ma=c(4,3,5,4)
mb=c(3,4,4)
mc=c(6,8,8,5,7)
t1=sum(ma)
t2=sum(mb)
t3=sum(mc)
G=t1+t2+t3
N=length(ma)+length(mb)+length(mc)
k=3
CF=G^2/N
# TSS=sum of squares of all observations -cf
TSS=(sum((ma)^2)+sum((mb)^2)+sum((mc)^2))-CF
r1=sum(ma)^2/length(ma)
r2=sum(mb)^2/length(mb)
r3=sum(mc)^2/length(mc)
SSB=sum(c(r1,r2,r3))-CF
SSB
SSW=TSS-SSB
SSW
MSB=SSB/(k-1)
MSB
MSW=SSW/(N-k)
MSW
F=MSB/MSW
F
# v1=k-1=3-1, k=3=no. of groups
# v2=N-k=12-3=9,N=total number of sample
# table value is 4.26
a1=c(4,3,5,4,3,4,4,6,8,8,5,7)
b1=c("a","a","a","a","b","b","b","c","c","c","c","c")
df=data.frame(a1,b1)
model_aov=aov(a1~factor(b1))
summary(model_aov)
df
ad=c(25,50,70,80,100,130,170)
sold=c(100,220,200,340,370,410,450)
plot(ad,sold)
corr(ad,sold)
cor(ad,sold)
install.packages("corrplot")
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
lrmodel=lm(y~x)
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
# sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
names(lrmodel)
coef(lrmodel)
summary(lrmodel)
lrmodel$model
lrmodel$coefficents
#install.packages("corrplot")
library(corrplot)
install.packages("corrplot")
predict(lrmodel,newdata=data.frame(x=c(15)))
predict(lrmodel,newdata=data.frame(x=c(12,13,14,15)))
# install.packages("corrplot")
library(corrplot)
# install.packages("corrplot")
library("corrplot")
# install.packages("corrplot")
library("corrplot")
x=data.frame(mtcars)
co(x$wt,x$hp)
M=cor(mtcars)
# install.packages("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
install.packages("corrplot")
install.packages("corrplot")
install.packages("corrplot")
library("corrplot")
x=data.frame(mtcars)
co(x$wt,x$hp)
x=data.frame(mtcars)
cor(x$wt,x$hp)
M=cor(mtcars)
corrplot(M,method="number")
install.packages("knitr")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::install_prebuilt()
setwd("C:/Users/91939/Desktop/1st-MCA/R")
setwd("C:\Users\ASUS\Desktop\2nd trimester\R")
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz&quot;)
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T)
1/8
rolldice(2)
rolldie(2)
rolldie(2,makespace = T)
1/32
1/36
rolldie(1,makespace = T)
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(tolldie(3),x1+x2+x3>16)
subset(rolldie(3),x1+x2+x3>16)
subset(rolldie(3),X1+X2+X3>16)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
cards(makespace = T)
cards(jokers=T,makespace = T)
cards(jokers=F,makespace = T)
subset(rolldie(2,makespace=T), X1-X2<5 or X2-X1<5)
subset(rolldie(2,makespace=T), X1-X2<5 || X2-X1<5)
subset(rolldie(2,makespace=T), X1-X2<5)
subset(rolldie(2,makespace=T), X2-X1<5)
subset(rolldie(2,makespace=T), X2-X1<2)
subset(rolldie(2,makespace=T), X1-X2<2)
length(subset(rolldie(2,makespace=T), X1-X2<2))
count(subset(rolldie(2,makespace=T), X1-X2<2))
length(s)
s=(subset(rolldie(2,makespace=T), X1-X2<2))
length(s)
s=(subset(rolldie(2,makespace=T), X1-X2<5))
length(s)
(subset(rolldie(2,makespace=T), X1-X2<5))
s=(subset(rolldie(2,makespace=T), X1-X2<5))
nrow(s)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
subset(s,suit="Hearts")
s=cards()
subset(s,suit="Hearts")
subset(s,suit="Heart")
s=cards()
subset(s,suit="Heart")
s=cards()
subset(s,suit=="Heart")
subset(s,suit=="Heart",rank>7)
s=cards()
s1=subset(s,suit=="Heart",rank>7)
s1
card(suit=="Heart",rank>7)
cards(suit=="Heart",rank>7)
cards(suit="Heart",rank>7)
subset(s,rank %in% 7:9)
subset(s,suit=="Heart",rank %in% 7:9)
subset(s,rank %in% 7:9)
subset(s,rank >7)
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(2,makespace = T)
s
s[1:3, ]
s[c(1,3),]
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),]
s[c(1,16),1]
s[c(1,16),4]
s[c(1,16),5]
nrow(s[c(1,16),5])
cards(jokers = T,makespace=T)
subset(s,rank %in% "K")
subset(s,rank %in% c("K")
subset(s,rank %in% c("K"))
subset(s,rank %in% c("K"))
subset(s,rank %in% c("K","J"))
s[,1=="K"]
s[,"rank"=="K"]
s
s=cards(jokers = T,makespace=T)
s[,"rank"=="K"]
s
s1=subset(s,rank %in% "K")
s1=subset(s,rank=="K")
nrow(s1)
subset(s,rank=="K")
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
cards(jokers=F,makespace = T)
s=cards()
subset(s,suit=="Heart")
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),5]
s=cards(jokers = T,makespace=T)
subset(s,rank=="K")
s1=subset(s,rank=="K")
nrow(s1)
subset(cards(jokers=T,makespace=T),suit="Heart")
subset(cards(jokers=T,makespace=T),suit=="Heart")
subset(s,rank %in% 7:9)
subset(s,rank==null)
subset(s,rank==NULL)
s=rolldie(3)
str(s)
s=rolldie(3,makespace = T)
str(s)
# Union, Intersection, Difference
S=cards()
A=subset(S,suit=="Heart")
B=subset(S,rank %in% 7:9)
union(A:B)
union(A,B)
nrow(union(A,B))
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
cards(jokers=F,makespace = T)
s=cards()
subset(s,suit=="Heart")
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),5]
s=cards(jokers = T,makespace=T)
subset(s,rank=="K")
s1=subset(s,rank=="K")
nrow(s1)
subset(cards(jokers=T,makespace=T),suit=="Heart")
subset(s,rank %in% 7:9)
s=rolldie(3,makespace = T)
str(s)
# Union, Intersection, Difference
S=cards()
A=subset(S,suit=="Heart")
B=subset(S,rank %in% 7:9)
u=union(A,B)
u
nrow(u)
i=intersect(A,B)
i
nrow(i)
d=diff(A,B)
d=difference(A,B)
d=setdiff(A,B)
d
nrow(d)
d=setdiff(B,A)
d
nrow(d)
d=setdiff(A,b)
d=setdiff(A,B)
d
nrow(d)
setwd("C:/Users/91939/Desktop/1st-MCA/R")
setwd("E:/2nd-trimester/R")
data=read.csv("13-Influence of AI TOOLS on Student's Learning Process.csv",header=T)
#Dropping unwanted columns and cleaning the dataset
drop=c("Timestamp","Username","Any.Comments..Review")
data=df = data[,!(names(data) %in% drop)]
#change column_names
colnames(data)=c("ar","g","e","freq","access","sat_per","impt","recall","mot_ler","sat_info","sat","anx","prcy","saw","p_att","flex","under","i_feed","m_obj","p_alter","add_s","l_exp")
#converting the columns into relevant datatype
data$g<-factor(data$g)
data$ar<-factor(data$ar)
data$e<-factor(data$e)
#Pie-chart for Age
df <- data.frame(AgeGroup = c("18-24", "Above 24", "Under 18"),
Count = c(134, 19, 5))
library(plotly)
plot_ly(labels = df$AgeGroup,values = df$Count,type = "pie",textinfo = "label+percent",
textposition = "inside",hoverinfo = "text+percent") %>%
layout(title = "3D Pie Chart - Age Distribution",scene = list(aspectmode = "cube",
camera = list(eye = list(x = 1.2, y = 1.2, z = 1.2))))
#Piechart for Gender
df <- data.frame(
Gender = c("Female", "Male"),
Count = c(64, 94)
)
# install.packages("plotly")
library(plotly)
plot_ly(labels = df$Gender,values = df$Count,type = "pie",textposition = "inside",
textinfo = "label+percent",hole = 0.6) %>%
layout(title = "Gender Distribution",scene = list(
aspectmode = "manual",aspectratio = list(x = 1, y = 1, z = 1))
)
#Pie chart for education levels
exp_data=as.data.frame(table(data$e))
# Assuming your data is stored in a data frame named 'df'
df <- data.frame(  Category = c("Animations", "B.Com", "BBM", "Data science", "Graduate", "HighSchool", "Ph.D", "Postgraduate", "PU", "Undergraduate", "Working"),
Count = c(1, 1, 1, 1, 1, 2, 1, 69, 2, 78, 1))
df <- df[order(-df$Count),]
library(ggplot2)
df$Category <- factor(df$Category, levels = df$Category)
ggplot(df, aes(x = "", y = Count, fill = Category, label = "")) +
geom_bar(stat = "identity", width = 1, color = "black", size = 0.1) +
coord_polar("y") +
theme_void() +
labs(title = "Distribution of Categories") +
scale_fill_discrete(name = "Category",breaks = df$Category,
labels = paste(df$Category, " (", df$Count, ")", sep = "")) +
theme(legend.position = "bottom")
setwd("E:/2nd-trimester/R")
data=read.csv("13-Influence of AI TOOLS on Student's Learning Process.csv",header=T)
#Dropping unwanted columns and cleaning the dataset
drop=c("Timestamp","Username","Any.Comments..Review")
data=df = data[,!(names(data) %in% drop)]
#change column_names
colnames(data)=c("ar","g","e","freq","access","sat_per","impt","recall","mot_ler","sat_info","sat","anx","prcy","saw","p_att","flex","under","i_feed","m_obj","p_alter","add_s","l_exp")
#converting the columns into relevant datatype
data$g<-factor(data$g)
data$ar<-factor(data$ar)
data$e<-factor(data$e)
#Pie-chart for Age
df <- data.frame(AgeGroup = c("18-24", "Above 24", "Under 18"),
Count = c(134, 19, 5))
library(plotly)
plot_ly(labels = df$AgeGroup,values = df$Count,type = "pie",textinfo = "label+percent",
textposition = "inside",hoverinfo = "text+percent") %>%
layout(title = "3D Pie Chart - Age Distribution",scene = list(aspectmode = "cube",
camera = list(eye = list(x = 1.2, y = 1.2, z = 1.2))))
#Piechart for Gender
df <- data.frame(
Gender = c("Female", "Male"),
Count = c(64, 94)
)
# install.packages("plotly")
library(plotly)
plot_ly(labels = df$Gender,values = df$Count,type = "pie",textposition = "inside",
textinfo = "label+percent",hole = 0.6) %>%
layout(title = "Gender Distribution",scene = list(
aspectmode = "manual",aspectratio = list(x = 1, y = 1, z = 1))
)
#Pie chart for education levels
exp_data=as.data.frame(table(data$e))
# Assuming your data is stored in a data frame named 'df'
df <- data.frame(  Category = c("Animations", "B.Com", "BBM", "Data science", "Graduate", "HighSchool", "Ph.D", "Postgraduate", "PU", "Undergraduate", "Working"),
Count = c(1, 1, 1, 1, 1, 2, 1, 69, 2, 78, 1))
df <- df[order(-df$Count),]
library(ggplot2)
df$Category <- factor(df$Category, levels = df$Category)
ggplot(df, aes(x = "", y = Count, fill = Category, label = "")) +
geom_bar(stat = "identity", width = 1, color = "black", size = 0.1) +
coord_polar("y") +
theme_void() +
labs(title = "Distribution of Educations") +
scale_fill_discrete(name = "Education",breaks = df$Category,
labels = paste(df$Category, " (", df$Count, ")", sep = "")) +
theme(legend.position = "bottom")
df <- data.frame(
Gender = c("Female", "Male"),
Count = c(64, 94)
)
# install.packages("plotly")
library(plotly)
plot_ly(labels = df$Gender,values = df$Count,type = "pie",textposition = "inside",
textinfo = "label+percent",hole = 0.6) %>%
layout(title = "Gender Distribution",scene = list(
aspectmode = "manual",aspectratio = list(x = 1, y = 1, z = 1))
)
df <- data.frame(AgeGroup = c("18-24", "Above 24", "Under 18"),
Count = c(134, 19, 5))
library(plotly)
plot_ly(labels = df$AgeGroup,values = df$Count,type = "pie",textinfo = "label+percent",
textposition = "inside",hoverinfo = "text+percent") %>%
layout(title = "3D Pie Chart - Age Distribution",scene = list(aspectmode = "cube",
camera = list(eye = list(x = 1.2, y = 1.2, z = 1.2))))
df <- data.frame(AgeGroup = c("18-24", "Above 24", "Under 18"),
Count = c(134, 19, 5))
library(plotly)
plot_ly(labels = df$AgeGroup,values = df$Count,type = "pie",textinfo = "label+percent",
textposition = "inside",hoverinfo = "text+percent") %>%
layout(title = "Pie Chart - Age Distribution",scene = list(aspectmode = "cube",
camera = list(eye = list(x = 1.2, y = 1.2, z = 1.2))))
