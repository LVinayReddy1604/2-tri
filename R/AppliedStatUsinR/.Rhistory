b1=c("a","a","a","a","b","b","b","c","c","c","c","c")
df=dataframe(a1,b1)
a1=c(4,3,5,4,3,4,4,6,8,8,5,7)
b1=c("a","a","a","a","b","b","b","c","c","c","c","c")
df=data.frame(a1,b1)
model_aov=aov(a1~factor(b1))
summary(model_aov)
df
install.packages("palmerpenguins")
data=penguins
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("palmerpenguins")
library(palmerpenguins)
install.packages("palmerpenguins")
install.packages("palmerpenguins")
library(palmerpenguins)
dat <- penguins # rename dataset
str(dat) # structure of dataset
table(dat$species, dat$sex)
mod <- aov(body_mass_g ~ sex * species,
data = dat
)
plot(mod, which = 2)
library(car)
install.packages("car")
library(car)
qqPlot(mod$residuals,
id = FALSE # remove point identification
)
hist(mod$residuals)
shapiro.test(mod$residuals)
plot(mod, which = 3)
leveneTest(mod)
ggplot(dat) +
aes(x = sex, y = body_mass_g) +
geom_boxplot()
library(ggplot2)
ggplot(dat) +
aes(x = sex, y = body_mass_g) +
geom_boxplot()
# boxplots by species
ggplot(dat) +
aes(x = species, y = body_mass_g) +
geom_boxplot()
# mean by group
aggregate(body_mass_g ~ species + sex,
data = dat,
FUN = mean
)
# mean and sd by group
library(dplyr)
group_by(dat, sex, species) %>%
summarise(
mean = round(mean(body_mass_g, na.rm = TRUE)),
sd = round(sd(body_mass_g, na.rm = TRUE))
)
# boxplot by group
library(ggplot2)
ggplot(dat) +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
# boxplot by group
library(ggplot2)
ggplot(dat) +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
dat %>%
filter(!is.na(sex)) %>%
ggplot() +
aes(x = species, y = body_mass_g, fill = sex) +
geom_boxplot()
dat %>%
filter(!is.na(sex)) %>%
ggplot() +
aes(x = sex, y = body_mass_g, fill = species) +
geom_boxplot()
# H0=All Means are same
#H1=The means are not equal
ma=c(4,3,5,4)
mb=c(3,4,4)
mc=c(6,8,8,5,7)
t1=sum(ma)
t2=sum(mb)
t3=sum(mc)
G=t1+t2+t3
N=length(ma)+length(mb)+length(mc)
k=3
CF=G^2/N
# TSS=sum of squares of all observations -cf
TSS=(sum((ma)^2)+sum((mb)^2)+sum((mc)^2))-CF
r1=sum(ma)^2/length(ma)
r2=sum(mb)^2/length(mb)
r3=sum(mc)^2/length(mc)
SSB=sum(c(r1,r2,r3))-CF
SSB
SSW=TSS-SSB
SSW
MSB=SSB/(k-1)
MSB
MSW=SSW/(N-k)
MSW
F=MSB/MSW
F
# v1=k-1=3-1, k=3=no. of groups
# v2=N-k=12-3=9,N=total number of sample
# table value is 4.26
a1=c(4,3,5,4,3,4,4,6,8,8,5,7)
b1=c("a","a","a","a","b","b","b","c","c","c","c","c")
df=data.frame(a1,b1)
model_aov=aov(a1~factor(b1))
summary(model_aov)
df
ad=c(25,50,70,80,100,130,170)
sold=c(100,220,200,340,370,410,450)
plot(ad,sold)
corr(ad,sold)
cor(ad,sold)
install.packages("corrplot")
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
lrmodel=lm(y~x)
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
# sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
x=c(8,11,7,10,12,5,4,6)
y=c(11,30,25,44,38,25,20,27)
ans="10.98 + 2.098x"
lrmodel=lm(y~x)
plot(y~x,
xlab="Experiment(X)",
ylab="Rating(Y)",
main="Regression Analysis",
sub=ans,
pch=20,
cex=2,
col="red")
abline(lrmodel,lwd=3,lty=1,col="Black")
names(lrmodel)
coef(lrmodel)
summary(lrmodel)
lrmodel$model
lrmodel$coefficents
#install.packages("corrplot")
library(corrplot)
install.packages("corrplot")
predict(lrmodel,newdata=data.frame(x=c(15)))
predict(lrmodel,newdata=data.frame(x=c(12,13,14,15)))
# install.packages("corrplot")
library(corrplot)
# install.packages("corrplot")
library("corrplot")
# install.packages("corrplot")
library("corrplot")
x=data.frame(mtcars)
co(x$wt,x$hp)
M=cor(mtcars)
# install.packages("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
library("corrplot")
install.packages("corrplot")
install.packages("corrplot")
install.packages("corrplot")
library("corrplot")
x=data.frame(mtcars)
co(x$wt,x$hp)
x=data.frame(mtcars)
cor(x$wt,x$hp)
M=cor(mtcars)
corrplot(M,method="number")
install.packages("knitr")
install.packages("tinytex")
tinytex::install_tinytex()
tinytex:::install_prebuilt()
setwd("C:/Users/91939/Desktop/1st-MCA/R")
setwd("C:\Users\ASUS\Desktop\2nd trimester\R")
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz&quot;)
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T)
1/8
rolldice(2)
rolldie(2)
rolldie(2,makespace = T)
1/32
1/36
rolldie(1,makespace = T)
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(tolldie(3),x1+x2+x3>16)
subset(rolldie(3),x1+x2+x3>16)
subset(rolldie(3),X1+X2+X3>16)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
cards(makespace = T)
cards(jokers=T,makespace = T)
cards(jokers=F,makespace = T)
subset(rolldie(2,makespace=T), X1-X2<5 or X2-X1<5)
subset(rolldie(2,makespace=T), X1-X2<5 || X2-X1<5)
subset(rolldie(2,makespace=T), X1-X2<5)
subset(rolldie(2,makespace=T), X2-X1<5)
subset(rolldie(2,makespace=T), X2-X1<2)
subset(rolldie(2,makespace=T), X1-X2<2)
length(subset(rolldie(2,makespace=T), X1-X2<2))
count(subset(rolldie(2,makespace=T), X1-X2<2))
length(s)
s=(subset(rolldie(2,makespace=T), X1-X2<2))
length(s)
s=(subset(rolldie(2,makespace=T), X1-X2<5))
length(s)
(subset(rolldie(2,makespace=T), X1-X2<5))
s=(subset(rolldie(2,makespace=T), X1-X2<5))
nrow(s)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
subset(s,suit="Hearts")
s=cards()
subset(s,suit="Hearts")
subset(s,suit="Heart")
s=cards()
subset(s,suit="Heart")
s=cards()
subset(s,suit=="Heart")
subset(s,suit=="Heart",rank>7)
s=cards()
s1=subset(s,suit=="Heart",rank>7)
s1
card(suit=="Heart",rank>7)
cards(suit=="Heart",rank>7)
cards(suit="Heart",rank>7)
subset(s,rank %in% 7:9)
subset(s,suit=="Heart",rank %in% 7:9)
subset(s,rank %in% 7:9)
subset(s,rank >7)
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(2,makespace = T)
s
s[1:3, ]
s[c(1,3),]
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),]
s[c(1,16),1]
s[c(1,16),4]
s[c(1,16),5]
nrow(s[c(1,16),5])
cards(jokers = T,makespace=T)
subset(s,rank %in% "K")
subset(s,rank %in% c("K")
subset(s,rank %in% c("K"))
subset(s,rank %in% c("K"))
subset(s,rank %in% c("K","J"))
s[,1=="K"]
s[,"rank"=="K"]
s
s=cards(jokers = T,makespace=T)
s[,"rank"=="K"]
s
s1=subset(s,rank %in% "K")
s1=subset(s,rank=="K")
nrow(s1)
subset(s,rank=="K")
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
cards(jokers=F,makespace = T)
s=cards()
subset(s,suit=="Heart")
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),5]
s=cards(jokers = T,makespace=T)
subset(s,rank=="K")
s1=subset(s,rank=="K")
nrow(s1)
subset(cards(jokers=T,makespace=T),suit="Heart")
subset(cards(jokers=T,makespace=T),suit=="Heart")
subset(s,rank %in% 7:9)
subset(s,rank==null)
subset(s,rank==NULL)
s=rolldie(3)
str(s)
s=rolldie(3,makespace = T)
str(s)
# Union, Intersection, Difference
S=cards()
A=subset(S,suit=="Heart")
B=subset(S,rank %in% 7:9)
union(A:B)
union(A,B)
nrow(union(A,B))
# install.packages("https://cran.r-project.org/src/contrib/Archive/prob/prob_0.9-1.tar.gz")
library(prob)
tosscoin(1)
tosscoin(3)
tosscoin(3, makespace = T) # returns the possibilities of each occurance
rolldie(1,makespace = T)
rolldie(3)
rolldie(2,makespace = T)
subset(rolldie(3,makespace=T),X1+X2+X3>16)
s=(subset(rolldie(2,makespace=T), X1-X2<1))
nrow(s)
cards(jokers=F,makespace = T)
s=cards()
subset(s,suit=="Heart")
s1=subset(s,rank %in% 7:9)
nrow(s1)
roulette()
s=tosscoin(4,makespace = T)
s
s[1:3, ]
s[c(1,16),5]
s=cards(jokers = T,makespace=T)
subset(s,rank=="K")
s1=subset(s,rank=="K")
nrow(s1)
subset(cards(jokers=T,makespace=T),suit=="Heart")
subset(s,rank %in% 7:9)
s=rolldie(3,makespace = T)
str(s)
# Union, Intersection, Difference
S=cards()
A=subset(S,suit=="Heart")
B=subset(S,rank %in% 7:9)
u=union(A,B)
u
nrow(u)
i=intersect(A,B)
i
nrow(i)
d=diff(A,B)
d=difference(A,B)
d=setdiff(A,B)
d
nrow(d)
d=setdiff(B,A)
d
nrow(d)
d=setdiff(A,b)
d=setdiff(A,B)
d
nrow(d)
#R1: Understanding of selected Dataset:
setwd("C:/Users/ASUS/Desktop/2nd-trimester/R/AppliedStatUsinR")
cereal=read.csv("UScereal1.csv",header=T)
cereal2=cereal
cal_mean=mean(cereal$calories,na.rm=T)
str(cereal)
summary(cereal)
cereal$mfr=factor(cereal$mfr)
cereal$shelf=factor(cereal$shelf,ordered = T)
cereal$vitamins=factor(cereal$vitamins)
names=c(unique(cereal$mfr))
for(name in names){
print(name)
print(mean(cereal$protein[cereal$mfr==name]))
}
max(cereal$protein[cereal$mfr=="G"])
max(cereal$protein[cereal$mfr=="K"])
max(cereal$protein[cereal$mfr=="N"])
max(cereal$protein[cereal$mfr=="P"])
max(cereal$protein[cereal$mfr=="Q"])
max(cereal$protein[cereal$mfr=="R"])
#R2 - Descriptive Analysis
#1.
is.na(cereal)
# install.packages("moments")
library(moments)
col_names = c("calories","protein","fat","sodium","fibre","carbo","sugars","shelf","potassium","vitamins")
for (col_name in col_names) {
if (is.numeric(cereal[[col_name]])) {
skew_value = skewness(cereal[[col_name]], na.rm = TRUE)
if (skew_value < 0) {
cereal[[col_name]][is.na(cereal[[col_name]])] = min(cereal[[col_name]], na.rm = TRUE)
}else if (skew_value == 0) {
cereal[[col_name]][is.na(cereal[[col_name]])] = mean(cereal[[col_name]], na.rm = TRUE)
}else {
cereal[[col_name]][is.na(cereal[[col_name]])] = max(cereal[[col_name]], na.rm = TRUE)
}
}
}
is.na(cereal)
#2.
summary(cereal)
#R3 - Exploratory Analysis
#1.
boxplot(fibre~mfr,data=cereal,
main="Box plot for relation between Fiber and manufactuere",
ylab="Fiber content",
xlab="Manufacturer",
col=c(1:8))
# 2.
library(ggplot2)
ggplot(cereal, aes(x = shelf, y = calories)) +
geom_boxplot() +
labs(
title = "Boxplot of Calories for Each Shelf",
x = "Shelf",
y = "Calories"
) +
theme_minimal()
#3.
library(corrplot)
str(cereal)
num_variables=c("calories","protein","fat","sodium","fibre","carbo","sugars","potassium")
num_var = cor(cereal[, num_variables])
print(num_var)
corrplot(num_var, method = "circle")
#R-4 - Model Building
#1.
num_vars = sapply(cereal, is.numeric)
mean_values = numeric(length = sum(num_vars))
i = 1
for (col in names(cereal)[num_vars]) {
mean_values[i] = mean(cereal[[col]], na.rm = TRUE)
i = i + 1
}
mean_values
top_four_indices = order(mean_values, decreasing = TRUE)[1:4]
top_four_variable_names = names(cereal)[num_vars][top_four_indices]
GreaterMeanFour = cereal[, top_four_variable_names]
GreaterMeanFour
#2.
corr_matrix <- cor(GreaterMeanFour)
corrplot(corr_matrix,method="shade")
#3.
lm_model <- lm(calories ~ carbo, data = GreaterMeanFour)
summary(lm_model)
plot(GreaterMeanFour$carbo, GreaterMeanFour$calories,
main = "Simple Linear Regression",
xlab = "Carbohydrates", ylab = "Calories",)
abline(lm_model, col = "red")
#4.
lm_model <- lm(calories ~ carbo, data = cereal)
lm_model
outliers <- which(abs(residuals(lm_model)) > 2 * sd(residuals(lm_model)))
calories_original <- cereal$calories
calories_no_outliers <- cereal$calories[-outliers]
t.test(calories_original,mu=cal_mean,paired=F,conf.level=0.95)
t.test(calories_no_outliers,mu=cal_mean,paired=F,conf.level=0.95)
#R5 - Conclusion
#1. The Manufacturer N (Nabisco) has more preference to Fiber than any other manufacturer.(Boxplot-1)
#2. There might be defected products if the shelf life is very longer for a large content of calories.(Boxplot-2)
#3. There is a strong relationship between fiber and potassium, because if the content of fibre is increased, the content of potassium is also increased. (corrplot)
#4. The Content of Sodium is found to be very high in overall Cereals.(greaterMean)
#5. The manufacturer N (Nabisco) has more quantity of all the contents compared to other manufacturers.
lm_model <- lm(calories ~ carbo, data = cereal)
lm_model
outliers <- which(abs(residuals(lm_model)) > 2 * sd(residuals(lm_model)))
calories_original <- cereal$calories
calories_no_outliers <- cereal$calories[-outliers]
t.test(calories_original,mu=cal_mean,paired=F,conf.level=0.95)
t.test(calories_no_outliers,mu=cal_mean,paired=F,conf.level=0.95)
